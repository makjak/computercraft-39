local FUEL = 1
local CHEST = 2
local COBBLE = 3
local DIRT = 4
local STONE = 5

-- single turtle
-- local SIDE_LENGTH_START = 1
-- local SIDE_COUNT_LIMIT = 2
-- local SIDE_LENGTH_INCREMENT = 1

-- dual turtle
-- local SIDE_LENGTH_START = 2
-- local SIDE_COUNT_LIMIT = 2
-- local SIDE_LENGTH_INCREMENT = 2

-- quad turtle
local SIDE_LENGTH_START = 1
local SIDE_COUNT_LIMIT = 1
local SIDE_LENGTH_INCREMENT = 2

local valuableSwitch = 0

function isValuable()

	if not t.detect() then
		return false
	end
	
	if valuableSwitch == 0 then
		valuableSwitch = 1

		t.select(DIRT)
		if t.compare() then
			return false
		end

		t.select(STONE)
		if t.compare() then
			return false
		end
	else
		valuableSwitch = 0

		t.select(STONE)
		if t.compare() then
			return false
		end

		t.select(DIRT)
		if t.compare() then
			return false
		end
	end
	

	return true
end


-- use cobble for up/down since dirt will clog fillers
function placeJunkUp(force)
	force = force or false

	if t.getItemCount(COBBLE) > 40 or force then
		t.select(COBBLE)
		t.placeUp()
	end
end

function placeJunkDn(force)
	force = force or false

	if t.getItemCount(COBBLE) > 40 or force then
		t.select(COBBLE)
		t.placeDown()
	end
end

-- place dirt first to get rid of it
function placeJunk(force)
	force = force or false

	if t.detect() then
		return
	end

	if t.getItemCount(DIRT) > 1 then
		t.select(DIRT)
		t.place(DIRT)
	elseif t.getItemCount(COBBLE) > 12 or force then
		t.select(COBBLE)
		t.place(COBBLE)
	end
end

function isChest()
	t.select(CHEST)
	if t.compare() then
		return true
	end
	return false
end

function isChestDown()
	t.select(CHEST)
	if t.compareDown() then
		return true
	end
	return false
end

function isChestUp()
	t.select(CHEST)
	if t.compareUp() then
		return true
	end
	return false
end

function digDown()
	if t.detectDn() and isChestDown() then
		t.select(FUEL)
		t.digChestDown()
	else
		t.select(FUEL)
		t.digDown()
	end
end

function digUp()
	if t.detectUp() and isChestUp() then
		t.select(FUEL)
		t.digChestUp()
	else
		t.select(FUEL)
		t.digAllUp()
	end
end

function checkWalls(force)
	force = force or false

	t.select(FUEL)
	for i=1,3 do
		if isValuable() then
			if isChest() then
				t.select(FUEL)
				t.digChest()
			end
			t.select(FUEL)
			t.digAll()
		end
		placeJunk(force)
		t.rt()
	end
	if isValuable() then
		if isChest() then
			t.select(FUEL)
			t.digChest()
		end
		t.select(FUEL)
		t.digAll()
	end
	placeJunk(force)
end

function drillDown(dp)
	if t.detectDown() then
		digDown()
	end
	while not t.detectDown() do
		checkWalls()
		t.select(FUEL)
		t.downDigAttack()
		placeJunkUp()
		if t.detectDown() then
			digDown()
		end
		dp = dp + 1
	end
	return dp
end

function drillUp(dp)
	while dp > 1 do
		checkWalls()
		while t.detectUp() do
			digUp()
			os.sleep(0.5)
		end
		t.select(FUEL)
		t.upDigAttack()
		placeJunkDn()
		dp = dp - 1
	end

	return dp
end


function mine()
	local depth = 0
	local heading = t.getLoc()

	-- go down, place cap
	t.select(FUEL)
	digDown()
	t.downAttack()
	digDown()
	depth = depth + 1

	checkWalls(true)
	t.downAttack()
	t.select(FUEL)
	digDown()
	depth = depth + 1

	t.placeUp(COBBLE)

	-- drill to bedrock hole 1
	depth = drillDown(depth)

	-- go up 10
	t.select(FUEL)
	for i=1,6 do
		t.upDigAttack()
		depth = depth - 1
	end

	t.turnHeading(heading)

	-- go to next position
	t.select(FUEL)
	t.fdDigAttack(2)
	t.lt()
	t.fdDigAttack()
	t.rt()

	t.digDown()
	while not t.detectDown() do
		while not t.dn() do
			t.attackDown()
		end

		t.digDown()
		depth = depth + 1
	end

	-- dig up -- hole 2
	depth = drillUp(depth)

	checkWalls(true)

	-- place cap
	t.select(FUEL)
	t.upDigAttack()
	t.placeDown(COBBLE)

	t.turnHeading(heading)

	-- clear path for player
	t.digAllUp()
	t.placeDown(COBBLE)

	for i=1,2 do
		t.rt()
		t.fdDigAttack()
		t.digAllUp()
		t.placeDown(COBBLE)
	end

	t.fdDigAttack()
	t.digAllUp()
	t.placeDown(COBBLE)

	for i=1,2 do
		t.rt()
		t.fdDigAttack()
		t.digAllUp()
		t.placeDown(COBBLE)
	end

	t.fdDigAttack()
	t.digAllUp()
	t.placeDown(COBBLE)
end

function next()
	-- go to next place
	t.select(FUEL)
	t.digAllUp()
	t.placeDown(COBBLE)
	t.lt()
	t.fdDigAttack()

	for i=1,2 do
		t.digAllUp()
		t.placeDown(COBBLE)
		t.rt()
		t.fdDigAttack()
	end

	for i=1,2 do
		t.digAllUp()
		t.placeDown(COBBLE)
		t.lt()
		t.fdDigAttack()
	end

	t.digAllUp()
	t.placeDown(COBBLE)
	t.rt()
end

function dumpChest()
	local map = {
		32, 32, 64,  64,
		 1,  0,  0,  0,
		 0,  0,  0,  0,
		 0,  0,  0,  0
	}

	t.rt(2)

	t.place(CHEST)
	for i=1,16 do
		if t.getItemCount(i) > map[i] then
			t.select(i)
			t.drop(t.getItemCount(i) - map[i])
		end
	end

	t.rt(2)
end

function set(moves, sideMoves, sideLength, sideCount)
	local f,err = fs.open("/core.conf", "w")
	f.write(textutils.serialize({
		moves=moves,
		sideMoves=sideMoves,
		sideLength=sideLength,
		sideCount=sideCount}))
	f.flush()
	f.close()
end

function get()
	if not fs.exists("/core.conf") then
		return nil
	end

	local f, err = fs.open("/core.conf", "r")

	local data = f.readLine()

	f.close()

	return textutils.unserialize(data)
end

function continue()
	local data = get()
	local moves = data.moves
	local sideMoves = data.sideMoves
	local sideLength = data.sideLength
	local sideCount = data.sideCount

	if moves % 2 == 0 then
		mine()
	else
		next()
	end

	sideMoves = sideMoves + 1

	if sideMoves >= sideLength then
		t.lt()
		sideCount = sideCount + 1
		sideMoves = 0
	end

	if moves % 2 == 0 then
		dumpChest()
	end

	moves = moves + 1

	if sideCount >= SIDE_COUNT_LIMIT then
		sideLength = sideLength + SIDE_LENGTH_INCREMENT
		sideCount = 0
	end

	set(moves,sideMoves,sideLength,sideCount)

	return moves % 2 == 1
end

function skip()
	local data = get()
	local moves = data.moves
	local sideMoves = data.sideMoves
	local sideLength = data.sideLength
	local sideCount = data.sideCount

	next()

	sideMoves = sideMoves + 1

	if sideMoves >= sideLength then
		t.lt()
		sideCount = sideCount + 1
		sideMoves = 0
	end

	moves = moves + 1

	if sideCount >= SIDE_COUNT_LIMIT then
		sideLength = sideLength + SIDE_LENGTH_INCREMENT
		sideCount = 0
	end

	set(moves,sideMoves,sideLength,sideCount)

	return moves % 2 == 1
end

-- start program --

local args = { ... }

if #args == 0 then
	print("---core---")
	print("The automated mining script")
	print("Fill the slots with the items below")
	print(" slot-item(amount)")
	print(" 1-coal(32)")
	print(" 2-cobble(13)")
	print(" 3-chest(32)")
	print(" 4-stone(1)")
	print(" 5-dirt(1)")
	print("")
	print("Usage:")
	print(" core mine")
	print("--does a single mining pass")
	print("core start")
	print("--restarts the mining parameters")
	print("core next")
	print("--moves the turtle to the next position")
	print("core continue [\"side\"/1,2,3...]")
	print("core skip [\"side\"/1,2,3...]")

	error()
end


local command = args[1]

if command == "mine" then
	mine()
elseif command == "next" then
	next()
elseif command == "start" then
	set(0,0,SIDE_LENGTH_START,0)
elseif command == "continue" then
	local val = args[2]

	if val == "side" then
		data = get()
		val = (data.sideLength - data.sideMoves + 1)/2
	else
		val = tonumber(val)
	end

	if val == nil then
		val = 1
	end

	if val > 10 then
		val = 10
	end

	for i=1,val do
		if continue() then
			continue()
		end
	end
elseif command == "skip" then
	local val = args[2]

	if val == "side" then
		data = get()
		val = (data.sideLength - data.sideMoves + 1)/2
	else
		val = tonumber(val)
	end

	if val == nil then
		val = 1
	end

	for i=1,val do
		if skip() then
			skip()
		end
	end
else
	print("Wha?")
end


