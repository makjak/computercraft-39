local PARENT_SIDE = "front"
local CHILD_SIDE = "back"
local isFirst = false
local isLast = false

function waitForSignal(side)
	while not rs.getInput(side) do
		os.sleep(0.5)
	end
end

function waitForNoSignal(side)
	while rs.getInput(side) do
		os.sleep(0.5)
	end
end

function sync(side)
	rs.setOutput(side, true)
	waitForSignal(side)
	os.sleep(1)
end


function unsync(side)
	rs.setOutput(side, false)
	waitForNoSignal(side)
	os.sleep(1)
end

function emptyGoods(isFuel)
	print("Empty Goods")
	-- wait for ready signal from parent
	if not isFirst then
		print("sync parent")
		sync(PARENT_SIDE)
		print("parent synced")
	end

	print("sending materials")
	-- send materials
	for i=1,16 do
		if t.getItemCount(i) > 0 then
			t.select(i)
			if isFirst and not isFuel then
				t.dropDown(t.getItemCount(i))
			else
				t.drop(t.getItemCount(i))
			end
		end
	end

	os.sleep(1)

	if not isLast then
		-- tell child that I'm ready for materials
		print("sync child")
		sync(CHILD_SIDE)

		print("passing materials")
		-- forward materials passed
		while rs.getInput(CHILD_SIDE) do
			for i=1,16 do
				if t.getItemCount(i) > 0 then
					t.select(i)
					if isFirst and not isFuel then
						t.dropDown(t.getItemCount(i))
					else
						t.drop(t.getItemCount(i))
					end
				end
			end
			os.sleep(1)
		end

		print("unsync child")
		unsync(CHILD_SIDE)
	end

	-- I am complete, turn off
	print("unsync parent")
	unsync(PARENT_SIDE)

	print("empty complete")
end

function refuel()
	print("refuel")
	if not isFirst then
		print("sync parent")
		sync(PARENT_SIDE)
	end

	-- suck up all the fuel I can
	print("gathering fuel")
	t.select(1)
	while turtle.suck() do
		os.sleep(0.5)
	end

	print("refueling")
	-- refuel myself
	while turtle.getFuelLevel() < 120 do
		for i=1,16 do
			if turtle.getItemCount(i) > 0 then
				t.select(i)
				turtle.refuel(1)
				break
			end
		end
	end

	if not isLast then
		-- tell the child that I'm ready
		print("sync child")
		sync(CHILD_SIDE)

		-- wait for child signal that it is done
		print("waiting for child...")
		waitForNoSignal(CHILD_SIDE)

		print("complete, unsync child")
		unsync(CHILD_SIDE)
	end

	if not isFirst then
		print("unsync parent")
		unsync(PARENT_SIDE)
	end

	-- shutdown
	print("refuel complete")

	emptyGoods(true)
end

function sweep()
	print("sweeping the floor")
	t.rt()

	t.select(1)

	for i=1,11 do
		while t.attack() or t.attackUp() do 
			os.sleep(0.5)  
		end

		while turtle.suck() do os.sleep(0.5) end

		while not t.fd() do
			t.attack()
			t.attackUp()
		end
	end

	t.rt(2)

	for i=1,11 do
		while t.attack() or t.attackUp() do 
			os.sleep(0.5)  
		end

		while turtle.suck() do os.sleep(0.5) end

		while not t.fd() do
			t.attack()
			t.attackUp()
		end
	end

	t.rt()
end

local args = { ... }

if args[1] ~= nil then
	if args[1] == "first" then
		print("i am first!")
		isFirst = true
	elseif args[1] == "last" then
		print("i am last!")
		isLast = true
	end
end

emptyGoods(false)

while true do
	if isFirst then
		if rs.getInput("left") then
			print("kill signal detected, stopping")
			break
		end
	end

	refuel()
	for i=1,5 do
		sweep()
		os.sleep(2)
	end
	emptyGoods(false)
	
	print("going to sleep")
	os.sleep(5)
end
