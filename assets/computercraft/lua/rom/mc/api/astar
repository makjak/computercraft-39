--[[
..uuuu...........................................
.u0<<<u..........................................
.u^<<u...........................................
..uu.............xxxx............................
.................xxxx............................
.................xxxx............................
.................xxxx............................
.................................................
.......................................f.........
.................................................
.................................................
.................................................
]]--

function new()
	local handle = {}

	return handle
end

function recalcMoves(data, point)
	local minm = -1
	local testp = {
			data.path:get(point.x+1,point.y,point.z),
			data.path:get(point.x-1,point.y,point.z),
			data.path:get(point.x,point.y+1,point.z),
			data.path:get(point.x,point.y-1,point.z),
			data.path:get(point.x,point.y,point.z+1),
			data.path:get(point.x,point.y,point.z-1)
		}
	for k,p in pairs(testp) do
		if p ~= nil then 
			vt.reset()
			vt.setLoc(p.x,p.y,p.z,p.h)
			vt.goto(point.x,point.y,point.z)

			local m = vt.getMoves() + p.m
			
			if minm == -1 or m < minm then
				point.m = m
				point.h = vt.getHeading()
				point.p = {x=p.x,y=p.y,z=p.z}
				minm = m
			end
		end
	end
end

function findUnknowns(data, s)
	-- add nodes to the unknowns table around the current node
	local f = data.finish

	local testp = {
			{x=s.x+1,y=s.y,z=s.z},
			{x=s.x-1,y=s.y,z=s.z},
			{x=s.x,y=s.y+1,z=s.z},
			{x=s.x,y=s.y-1,z=s.z},
			{x=s.x,y=s.y,z=s.z+1},
			{x=s.x,y=s.y,z=s.z-1}
		}
	for k,p in pairs(testp) do
		local skip = false

		if data.path:exists(p.x,p.y,p.z) then
			skip = true
		end

		if data.unknowns:exists(p.x,p.y,p.z) then
			skip = true
		end

		if blockmap.exists(p.x,p.y,p.z) then
			skip = true
		end

		if not skip then
			vt.reset()
			vt.setLoc(s.x,s.y,s.z,s.h)
			vt.goto(p.x,p.y,p.z)
			vt.goto(f.x,f.y,f.z)

			local m = vt.getMoves() + s.m
			local np = {
				x=p.x,
				y=p.y,
				z=p.z,
				h=-1,
				m=m,
				p=nil}
			data.unknowns:set(p.x,p.y,p.z,np)

			data.uq:put(np,np.m)
		end
	end
end

function getBestUnknown(data)
	
	local p = data.uq:pop()

	if p ~= nil then
		data.unknowns:remove(p.x,p.y,p.z)
	end

	return p
end

function findPath(x,y,z)
	print("init data structures")

	local data = {}
	data.path = blocktable.new()
	data.unknowns = blocktable.new()
	data.uq = pq.create(false)
	data.start = {}
	data.finish = {}
	data.current = {}

	local x1,y1,z1,h = t.getLoc()

	data.current = {x=x1,y=y1,z=z1,h=h,m=0,p=nil}
	data.start = data.current
	data.finish = {x=x,y=y,z=z}
	data.path:set(x1, y1, z1, data.start)

	local test = data.current
	local f = data.finish
	print("building graph")
	local count = 0
	while test.x ~= f.x or 
		test.y ~= f.y or 
		test.z ~= f.z do

		findUnknowns(data, test)

		test = getBestUnknown(data)
		recalcMoves(data, test)
		data.path:set(test.x,test.y,test.z,test)

		count = count + 1
		if count % 1000 == 0 then
			print("Built " .. count .. " points.")
			os.sleep(0.5)
		end
	end
	print("Built " .. count .. " points.")

	-- build list
	data.current = test

	print("generating path")
	local list = {}
	generateList(data.path, list, data.current)
	print("done!")
	return list
end

function generateList(path, list, node)
	if node == nil then
		return
	end

	while node ~= nil do
		table.insert(list,1, node)
		local p = node.p
		if p ~= nil then
			node = path:get(p.x,p.y,p.z)
		else
			node = nil
		end
	end
end

