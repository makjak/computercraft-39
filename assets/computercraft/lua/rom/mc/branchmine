local FUEL = 1
local COBBLE = 2
local DIRT = 3
local STONE = 4

local valuableSwitch = 0

local visited = nil
local targets = nil
local cantdig = nil
local cavemap = nil
local distance = 32
local distance2 = distance * distance

local args = { ... }

if args[1] == "help" then
	print("---branch mine---")
	print("The automated branch mining script")
	print("Fill the slots with the items below")
	print(" slot-item(amount)")
	print(" 1-coal(32)")
	print(" 2-cobble(1)")
	print(" 3-dirt(1)")
	print(" 4-stone(1)")
	print("")
	print("Usage:")
	print(" branchmine restart")
	print("--restarts the mining process")
	print(" branchmine")
	print("--starts/resumes the mining process")
elseif args[1] == "restart" then
	print("Restarting mining")
	visited = blocktable.new()
	visited:setSaveOnChange("/visited.branchmine")

	targets = blocklist.new()
	targets:setSaveOnChange("/targets.branchmine")

	cantdig = blocktable.new()
	cantdig:setSaveOnChange("/cantdig.branchmine")

elseif fs.exists("/visited.branchmine") then
	print("Resuming previous run")
	visited = blocktable.load("/visited.branchmine")
	targets = blocklist.load("/targets.branchmine")
	cantdig = blocktable.load("/cantdig.branchmine")

else
	print("Starting a new run")
	visited = blocktable.new()
	visited:setSaveOnChange("/visited.branchmine")

	targets = blocklist.new()
	targets:setSaveOnChange("/targets.branchmine")

	cantdig = blocktable.new()
	cantdig:setSaveOnChange("/cantdig.branchmine")

end

print("configuration complete")

function _onDig(fnIsValuable, fnGetLoc, fnSuck)
	local cx, cy, cz = fnGetLoc()
	if fnIsValuable() then
		local tx,ty,tz = fnGetLoc()
		addTarget(tx,ty,tz,true)
		t.select(1)
		fnSuck()

		if t.isInventoryFull() then
			visited:remove(tx,ty,tz)
			addToTarget(tx,ty,tz, true)
			emptyInventory()
		end
	end

	t.select(1)
end

function onDig()
	return _onDig(isValuable, t.getLocFd, suckChest)
end

function onDigUp()
	return _onDig(isValuableUp, t.getLocUp, suckChestUp)
end

function onDigDn()
	return _onDig(isValuableDn, t.getLocDn, suckChestDn)
end

t.setDigCallback(onDig)
t.setDigUpCallback(onDigUp)
t.setDigDnCallback(onDigDn)


function _isValuable(detect, compare)
	if not detect() then
		return false
	end
	
	if valuableSwitch == 0 then
		valuableSwitch = 1

		t.select(DIRT)
		if compare() then
			return false
		end

		t.select(COBBLE)
		if compare() then
			return false
		end

		t.select(STONE)
		if compare() then
			return false
		end
	else
		valuableSwitch = 0

		t.select(STONE)
		if compare() then
			return false
		end

		t.select(COBBLE)
		if compare() then
			return false
		end

		t.select(DIRT)
		if compare() then
			return false
		end
	end
	

	return true
end
function isValuable()
	return _isValuable(t.detect, t.compare)
end

function isValuableUp()
	return _isValuable(t.detectUp, t.compareUp)
end

function isValuableDn()
	return _isValuable(t.detectDn, t.compareDn)
end

function _suckChest(fnSuck)
	while not t.isInventoryFull() and fnSuck() do
		os.sleep(0.1)
	end
end

function suckChest()
	_suckChest(turtle.suck)
end

function suckChestUp()
	_suckChest(turtle.suckUp)
end

function suckChestDn()
	_suckChest(turtle.suckDown)
end

function emptyInventory()
	local x,y,z,h = t.getLoc()

	t.gotoAttackDigNavi(0,0,0,cantdig)

	dumpChest()

	t.setHeading(0)

	print("Inventory full. This cycle complete")

	error()
end

function addToTarget(x,y,z,isOre)
	if visited:exists(x,y,z) or cantdig:exists(x,y,z) then
		print(x .. "," .. y .. "," .. z .. " not added!")
		return
	end

	local d2 = x * x + y * y + z * z

	if  d2 < distance2 then
		targets:push(x,y,z,isOre)
	else
		print(x .. "," .. y .. "," .. z .. " out of range!")
	end

end

function addTarget(x,y,z,isOre)
	addToTarget(x-1, y-1, z+1, false)
	addToTarget(x-1, y-1, z-1, false)
	addToTarget(x+1, y-1, z+1, false)
	addToTarget(x+1, y-1, z-1, false)

	addToTarget(x-1, y+1, z+1, false)
	addToTarget(x-1, y+1, z-1, false)
	addToTarget(x+1, y+1, z+1, false)
	addToTarget(x+1, y+1, z-1, false)

	addToTarget(x,   y,   z, isOre)
end

function _scanAndDig(fnValuable, fnSuck, fnDig, fnLoc)
	local cx,cy,cz = t.getLoc()
	visited:set(cx,cy,cz, true)
	if fnValuable() then
		local tx,ty,tz = fnLoc()
		addTarget(tx,ty,tz,true)
		t.select(1)
		fnSuck()

		if t.isInventoryFull() then
			visited:remove(tx,ty,tz)
			addToTarget(tx,ty,tz, true)
			emptyInventory()
		end

		t.select(1)
		fnDig()

		if t.isInventoryFull() then
			emptyInventory()
		end
	end
end

function scanAndDig()
	_scanAndDig(isValuable, suckChest, t.digAll, t.getLocFd)
end

function scanAndDigUp()
	_scanAndDig(isValuableUp, suckChestUp, t.digAllUp, t.getLocUp)
end

function scanAndDigDn()
	_scanAndDig(isValuableDn, suckChestDn, t.digDn, t.getLocDn)
end

function scanAndDigAll()
	local cx,cy,cz = t.getLoc()

	local x,y,z = t.getLocUp()
	if not visited:exists(x,y,z) and not cantdig:exists(x,y,z) then
		scanAndDigUp()
	end
	
	x,y,z = t.getLocDn()
	if not visited:exists(x,y,z) and not cantdig:exists(x,y,z) then
		scanAndDigDn()
	end

	x,y,z = t.getLocFd()
	if not visited:exists(x,y,z) and not cantdig:exists(x,y,z) then
		scanAndDig()
	end
	
	t.rt()
	
	x,y,z = t.getLocFd()
	if not visited:exists(x,y,z) and not cantdig:exists(x,y,z) then
		scanAndDig()
	end
	
	t.rt()
	
	x,y,z = t.getLocFd()
	if not visited:exists(x,y,z) and not cantdig:exists(x,y,z) then
		scanAndDig()
	end
	
	t.rt()

	x,y,z = t.getLocFd()
	if not visited:exists(x,y,z) and not cantdig:exists(x,y,z) then
		scanAndDig()
	end
end

function dumpChest()
	local map = {
		32, 1, 1,  1,
		 0,  0,  0,  0,
		 0,  0,  0,  0,
		 0,  0,  0,  0
	}

	for i=1,16 do
		if t.getItemCount(i) > map[i] then
			t.select(i)
			t.dropDn(t.getItemCount(i) - map[i])
		end
	end

end

-- start program --

if distance ~= nil then
	-- we are located here
	t.setLoc(0,0,0,0)
	cantdig:set(0,-1,0, true)

	print("Starting to mine")

	local d = 0

	while d < distance do
		-- save current location
		local cx,cy,cz,ch = t.getLoc()

		addToTarget(cx,cy,cz,false)

		-- scan around
		scanAndDigAll()

		-- pop items on stack until I get nil
		local loc = targets:pop(cx,cy,cz,ch)
		while loc ~= nil do
			if not visited:exists(loc.x,loc.y,loc.z) and not cantdig:exists(loc.x,loc.y,loc.z) then
				t.gotoAttackDigNavi(loc.x,loc.y,loc.z,cantdig)

				scanAndDigAll()

				visited:set(loc.x,loc.y,loc.z,true)
			else
				nx,ny,nz,nh = t.getLoc()
				loc = targets:pop(nx,ny,nz,nh)
			end
		end
		t.gotoDigAttack(cx,cy,cz)
		t.setHeading(ch)

		t.select(1)
		t.fdDigAttack()

		d = d + 1
	end

	t.gotoAttackDigNavi(0,0,0,cantdig)
	dumpChest()
	t.setHeading(0)
	print("Branchmine complete, could not find any more ores")

	fs.delete("/visited.branchmine")
	fs.delete("/targets.branchmine")
	fs.delete("/cantdig.branchmine")
end


