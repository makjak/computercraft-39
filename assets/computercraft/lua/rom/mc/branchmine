local FUEL = 1
local CHEST = 2
local COBBLE = 3
local DIRT = 4
local STONE = 5

local valuableSwitch = 0

local visited = nil
local targets = nil
local cantdig = nil
local distance = 32

local args = { ... }

if #args == 0 then
	print("---branch mine---")
	print("The automated branch mining script")
	print("Fill the slots with the items below")
	print(" slot-item(amount)")
	print(" 1-coal(32)")
	print(" 2-chest(13)")
	print(" 3-cobble(32)")
	print(" 4-dirt(1)")
	print(" 5-stone(1)")
	print("")
	print("Usage:")
	print(" branchmine restart")
	print("--restarts the mining process")
	print(" branchmine")
	print("--starts/resumes the mining process")
end

if args[1] == "restart" then
	visited = blocktable.new()
	visited:setSaveOnChange("/visited.branchmine")

	targets = pq.create(false)
	targets:setSaveOnChange("/targets.branchmine")

	cantdig = blocktable.new()
	cantdig:setSaveOnChange("/cantdig.branchmine")

elseif fs.exists("/visited.branchmine") then
	visited = blocktable.load("/visited.branchmine")
	targets = pq.load("/targets.branchmine")
	cantdig = blocktable.load("/cantdig.branchmine")
else
	visited = blocktable.new()
	visited:setSaveOnChange("/visited.branchmine")

	targets = pq.create(false)
	targets:setSaveOnChange("/targets.branchmine")

	cantdig = blocktable.new()
	cantdig:setSaveOnChange("/cantdig.branchmine")
end

function _onDig(fnIsValuable, fnGetLoc)
	t.select(1)

	local cx, cy, cz = fnGetLoc()
	if fnIsValuable() then
		addTarget(cx,cy,cz)
	end
end

function onDig()
	return _onDig(isValuable, t.getLocFd)
end

function onDigUp()
	return _onDig(isValuableUp, t.getLocUp)
end

function onDigDn()
	return _onDig(isValuableDn, t.getLocDn)
end

t.setDigCallback(onDig)
t.setDigUpCallback(onDigUp)
t.setDigDnCallback(onDigDn)

function _safeDig(fnIsValuable, fnIsChest, fnSuck, fnDig, fnDigLoc)
	-- if it's valuable, then we want to check if it's a chest before digging it
	if fnIsChest() then
		t.select(1)
		while fnSuck() do
			os.sleep(SUCK_TIME)
		end

		if t.isInventoryFull() then
			emptyInventory()
		end
	end			

	if not fnDig() then
		cantdig:set(fnDigLoc(), true)
	end

	if t.isInventoryFull() then
		emptyInventory()
	end

	return state
end


function _isValuable(detect, compare)
	if not detect() then
		return false
	end
	
	if valuableSwitch == 0 then
		valuableSwitch = 1

		t.select(DIRT)
		if compare() then
			return false
		end

		t.select(COBBLE)
		if compare() then
			return false
		end

		t.select(STONE)
		if compare() then
			return false
		end
	else
		valuableSwitch = 0

		t.select(STONE)
		if compare() then
			return false
		end

		t.select(COBBLE)
		if compare() then
			return false
		end

		t.select(DIRT)
		if compare() then
			return false
		end
	end
	

	return true
end
function isValuable()
	return _isValuable(t.detect, t.compare)
end

function isValuableUp()
	return _isValuable(t.detectUp, t.compareUp)
end

function isValuableDn()
	return _isValuable(t.detectDn, t.compareDn)
end

-- use cobble for up/down since dirt will clog fillers
function placeJunkUp(force)
	force = force or false

	if t.getItemCount(COBBLE) > 40 or force then
		t.select(COBBLE)
		t.placeUp()
	end
end

function placeJunkDn(force)
	force = force or false

	if t.getItemCount(COBBLE) > 40 or force then
		t.select(COBBLE)
		t.placeDown()
	end
end

-- place dirt first to get rid of it
function placeJunk(force)
	force = force or false

	if t.detect() then
		return
	end

	if t.getItemCount(DIRT) > 1 then
		t.select(DIRT)
		t.place(DIRT)
	elseif t.getItemCount(COBBLE) > 12 or force then
		t.select(COBBLE)
		t.place(COBBLE)
	end
end

function _isChest(compare)
	t.select(CHEST)
	if t.compare() then
		return true
	end
	return false
end

function isChest()
	return _isChest(t.compare)
end

function isChestDn()
	return _isChest(t.compareDn)
end

function isChestUp()
	return _isChest(t.compareUp)
end

function _suckChest(fnSuck)
	while fnSuck() do
		os.sleep(0.1)
	end
end

function suckChest()
	_suckChest(turtle.suck)
end

function suckChestUp()
	_suckChest(turtle.suckUp)
end

function suckChestDn()
	_suckChest(turtle.suckDown)
end

function emptyInventory()
	local x,y,z,h = t.getLoc()

	t.gotoAttackDigNavi(0,0,0,cantdig)

	t.placeDn(CHEST)

	dumpChest()

	t.setHeading(0)

	error()
end

function addToTarget(x,y,z)
	if visited:exists(x,y,z) then
		return
	end

	vt.reset()
	vt.setLoc(0,0,0,0)
	vt.goto(x,y,z)

	if vt.getMoves() < distance then
		targets:put({x=x,y=y,z=z}, y*1000000 + x * 1000 + z)
	end

end

function addTarget(x,y,z)
	addToTarget(x-1, y-1, z+1)
	addToTarget(x-1, y-1, z-1)
	addToTarget(x+1, y-1, z+1)
	addToTarget(x+1, y-1, z-1)

	addToTarget(x-1, y+1, z+1)
	addToTarget(x-1, y+1, z-1)
	addToTarget(x+1, y+1, z+1)
	addToTarget(x+1, y+1, z-1)

	addToTarget(x,   y,   z)
end

function _scanAndDig(fnValuable, fnIsChest, fnSuck, fnDig, fnLoc)
	local cx,cy,cz = t.getLoc()
	visited:set(cx,cy,cz, true)
	if fnValuable() then
		addTarget(fnLoc())
		t.select(1)
		if fnIsChest() then
			t.select(1)
			while fnSuck() do
				os.sleep(SUCK_TIME)
			end

			while t.isInventoryFull() do
				emptyInventory()

				t.select(1)
				while fnSuck() do
					os.sleep(SUCK_TIME)
				end
			end
		end

		t.select(1)
		fnDig()

		if t.isInventoryFull() then
			emptyInventory()
		end
	end
end

function scanAndDig()
	_scanAndDig(isValuable, isChest, turtle.suck, t.digAll, t.getLocFd)
end

function scanAndDigUp()
	_scanAndDig(isValuableUp, isChestUp, turtle.suckUp, t.digAllUp, t.getLocUp)
end

function scanAndDigDn()
	_scanAndDig(isValuableDn, isChestDn, turtle.suckDn, t.digDn, t.getLocDn)
end

function scanAndDigAll()
	local cx,cy,cz = t.getLoc()
	if visited:exists(cx,cy,cz) then
		return
	end

	local x,y,z = t.getLocUp()
	if not visited:exists(x,y,z) then
		scanAndDigUp()
	end
	
	x,y,z = t.getLocDn()
	if not visited:exists(x,y,z) then
		scanAndDigDn()
	end

	scanAndDig()
	t.rt()
	scanAndDig()
	t.rt()
	scanAndDig()
	t.rt()
	scanAndDig()
end

function dumpChest()
	local map = {
		32, 32, 64,  64,
		 1,  0,  0,  0,
		 0,  0,  0,  0,
		 0,  0,  0,  0
	}

	for i=1,16 do
		if t.getItemCount(i) > map[i] then
			t.select(i)
			t.dropDn(t.getItemCount(i) - map[i])
		end
	end

end

-- start program --

if distance ~= nil then
	-- we are located here
	t.setLoc(0,0,0,0)
	cantdig:set(0,-1,0, true)

	while distance > 0 do
		-- save current location
		local cx,cy,cz,ch = t.getLoc()

		addToTarget(cx,cy,cz)

		-- scan around
		scanAndDigAll()

		-- pop items on stack until I get nil
		local loc = targets:peek()
		while loc ~= nil do
			if not visited:exists(loc.x,loc.y,loc.z) then
				t.gotoAttackDigNavi(loc.x,loc.y,loc.z,cantdig)

				scanAndDigAll()

				visited:set(loc.x,loc.y,loc.z, true)
			else
				targets:pop()
				loc = targets:peek()
			end
		end
		t.gotoDigAttack(cx,cy,cz)
		t.setHeading(ch)

		t.select(1)
		t.fdDigAttack()

		distance = distance - 1
	end

	t.gotoAttackDigNavi(0,0,0,cantdig)
	t.placeDn(CHEST)
	dumpChest()
	t.setHeading(0)
end


