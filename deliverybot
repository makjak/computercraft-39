local DELIVERY_NETWORK = 2000

-- startup stuff
local function printUsage()
	print( "Usages:" )
	print( "deliverybot itemname" )
end

local tArgs = { ... }
if #tArgs < 1 then
	printUsage()
	return
end

local itemName = tArgs[1]
local messageQueue = {}
local myModem = nil

print("Sharing ", itemName)

function listRequest(modem, clientId, nameRequest)
	-- count items
	turtle.select(1)
	while turtle.suck() do
		os.sleep(0.5)
	end

	local itemCount = 0
	for i=2,16,1 do
		itemCount = itemCount + turtle.getItemCount(i)
	end


	print("I have ", itemCount," items.")
	if itemCount == 0 then
		print("No items available, not replying")
	else
		print("Sending to ", clientId)

		local posX, posY, posZ = navi.locate()
		print("Location: (",posX,",",posY,",",posZ,")")

		modem.transmit( clientId, DELIVERY_NETWORK, 
			textutils.serialize({
				"list_resp",
				os.getComputerID(),
				itemName,
				itemCount,
				posX,
				posY,
				posZ}
			))
	end
end

function doDelivery(modem,clientId,requestCount, x,y,z)
	refuel.run(1000)
	
	local itemCount = 0
	for i=2,16,1 do
		itemCount = itemCount + turtle.getItemCount(i)
	end

	if requestCount > itemCount then
		requestCount = itemCount
	end

	-- fly to target
	navi.goto(x,y,z)

	-- drop items
	for i=2,16,1 do
		if turtle.getItemCount(i) > 0 then
			turtle.select(i)

			if requestCount > turtle.getItemCount(i) then
				turtle.dropDown()
				requestCount = requestCount - turtle.getItemCount(i)
			else
				turtle.dropDown(requestCount)
				requestCount = 0
			end
		end

		if requestCount == 0 then
			break
		end
	end
			
	turtle.up()
	turtle.up()
	turtle.up()
	turtle.up()

	-- tell client that we are done
	modem.transmit( clientId, DELIVERY_NETWORK, 
		textutils.serialize({"complete", os.getComputerID()}))
end

function deliveryRequest(modem, clientId, requestCount, x, y, z)
	turtle.select(1)
	while turtle.suck() do
		os.sleep(0.5)
	end

	-- store home position
	local oh = navi.findHeading()
	local xo,yo,zo = navi.locate()

	while true do
		doDelivery(modem, clientId, requestCount, x, y, z)
		-- check for more requests
		if #messageQueue == 0 then
			break
		end

		-- one more request
		local pair = table.remove(messageQueue, 0)

		clientId = pair[1]
		local packet = pair[2]
		requestCount = packet[3]
		x = packet[4]
		y = packet[5]
		z = packet[6]
	end

	-- fly home
	navi.goto(xo,yo,zo)
	navi.setHeading(oh)

	refuel.run(1000)

	turtle.select(1)
	while turtle.suck() do
		os.sleep(0.5)
	end
end

function networkServer()
	refuel.run(1000)

	turtle.select(1)
	while turtle.suck() do
		os.sleep(0.5)
	end

	local modem_side = nil

	myModem, modem_side = modemhelp.configureModem(DELIVERY_NETWORK)

	print("Listening for requests")

	while true do
		local replyId, message = modemhelp.waitForPacket(myModem, DELIVERY_NETWORK)

		local packet = textutils.unserialize(message)
		
		-- this can be done instantly, so do it
		if packet[1] == "list" and packet[2] == itemName then
			listRequest(myModem, replyId, packet[2])

		-- others need to be handled in the other thread
		elseif packet[2] == os.getComputerID() then
			table.insert(messageQueue, {replyId, packet})
		end
	end
end

function handleQueue()
	while true do
		if #messageQueue > 0 then
			local pair = table.remove(messageQueue, 0)

			local replyId = pair[1]
			local packet = pair[2]

			deliveryRequest(myModem, replyId, packet[3], packet[4], packet[5], packet[6])
		end

		os.sleep(1)
	end
end


parallel.waitForAll(networkServer, handleQueue)