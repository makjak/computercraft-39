-- Will clean up floating blocks and then return to start
-- slot 1+ = empty

local maxDist = 32
local scannedLocations = {}
local newLocations = {}


function isWithinRange(x,y,z)
	return math.abs(x) < maxDist and math.abs(z) < maxDist and math.abs(y) < maxDist * 2 and y >=0
end

function hashLoc(x,y,z)
	return x..","..y..","..z
end

function isQueued(x,y,z)
	return newLocations[hashLoc(x,y,z)] ~= nil
end

function isScanned(x,y,z)
	return scannedLocations[hashLoc(x,y,z)] ~= nil
end

function isHandled(x,y,z)
	if isQueued(x,y,z) then
		return true
	end

	return isScanned(x,y,z)
end

function setScanned(x,y,z)
	if isWithinRange(x,y,z) then
		scannedLocations[hashLoc(x,y,z)] = true
	end
end

function addQueue(x,y,z)
	if isWithinRange(x,y,z) then
		if not isHandled(x,y,z) then
			print("adding "..x..","..y..","..z)
			newLocations[hashLoc(x,y,z)] = {x=x,y=y,z=z}
		end
	end
end

function findNearestPoint()
	local h,x,y,z = t.getLoc()

	local selV = nil
	local selK = nil
	local minSize = -1

	for key,value in pairs(newLocations) do
		if value ~= nil then

			vt.reset()
			vt.setLoc(h,x,y,z)

			vt.goto(value.x,value.y,value.z)
			moves = vt.getMoves()

			-- weight based on height
			if value.y < y then
				moves = moves + 5
			elseif value.y == y then
				moves = moves + 1
			end
			
			if minSize == -1 then
				minSize = moves
				selV = value
				selK = key
			elseif minSize > moves then
				minSize = moves
				selV = value
				selK = key
			end

			if moves == 1 then
				break
			end
		end
	end

	return selK
end

function getScanList()
	local list = {false, false, false, false}

	vt.reset()
	vt.setLoc(t.getLoc())

	for i=1,4 do
		local h = vt.getLoc()
		list[h+1] = not isHandled(vt.getLocFd())
		vt.rt()
	end

	return list
end

function scan()
	if t.detectUp() then
		addQueue(t.getLocUp())
	else
		setScanned(t.getLocUp())
	end

	if t.detectDown() then
		addQueue(t.getLocDn())
	else
		setScanned(t.getLocDn())
	end

	
	local list = getScanList()
	
	local h = t.getLoc()

	for i=1,4 do
		local nh = ((i-1) + h) % 4
		if list[nh + 1] then
			t.setHeading(nh)
			if t.detect() then
				addQueue(t.getLocFd())
			else
				setScanned(t.getLocFd())
			end
		end
	end

	t.setHeading(h)
end

function dumpInventory()
	t.goto(0,0,0)
	t.setHeading(2)
	for i=1,16 do
		local count = t.getItemCount(i)
		if count > 0 then
			t.select(i)
			t.drop(count)
		end
	end

	t.select(1)
end

function isEmpty()
	return  next(newLocations) == nil
end

function _save(name, data)
	local f,err = fs.open("/"..name..".cleanup", "w")
	f.write(textutils.serialize(data))
	f.flush()
	f.close()
end

function save()
	_save("scannedLocations", scannedLocations)
	_save("newLocations", newLocations)
end

function _load(name)
	if not fs.exists("/"..name..".cleanup") then
		return {}
	end

	local f, err = fs.open("/"..name..".cleanup", "r")

	local data = f.readLine()

	f.close()

	return textutils.unserialize(data)
end

function load()
	scannedLocations = _load("scannedLocations")
	newLocations = _load("newLocations")
	
	if fs.exists("/roofLocations.cleanup") then
		local roofLocations = _load("roofLocations")
		for key,value in pairs(roofLocations) do
			newLocations[key] = value
		end

		fs.delete("roofLocations.cleanup")
	end

	if fs.exists("/roofScanned.cleanup") then
		local roofScanned = _load("roofScanned")
		for key,value in pairs(roofScanned) do
			scannedLocations[key] = value
		end
		fs.delete("roofScanned.cleanup")
	end

end

function isFuelEmpty()
	local fuel = turtle.getFuelLevel()

	vt.reset()
	vt.setLoc(t.getLoc())
	vt.goto(0,0,0)

	local reqFuel =  vt.getFuel() + 10

	if reqFuel >= fuel then
		return true
	end

	return false
end


function cleanup()
	t.setLoc(0,0,0,0)

	t.fdDigAttack()

	scan()

	while not isEmpty() do
		local key = findNearestPoint()

		if key == nil then
			print("oops!")
			error()
		end

		local value = newLocations[key]

		newLocations[key] = nil

		t.goto(value.x,value.y,value.z)

		setScanned(value.x,value.y,value.z)

		if t.detect() then
			addQueue(t.getLocFd())
		else
			setScanned(t.getLocFd())
		end

		scan()

		if isFuelEmpty() then
			print("Out of fuel, please refuel!")
			save()
			dumpInventory()
			break
		elseif t.isInventoryFull() then
			print("Out of space")
			dumpInventory()
		end
	end

	dumpInventory()

	t.rt(2)
end

local args = { ... }

if args[1] ~= nil and args[1] == "resume" then
	load()
end

turtle.select(1)
t.select(1)

cleanup()

