-- turtle short cuts. mainly handles things like fuel, and special digging
-- provides most of the turtle api + some more features

local ZPOS = 0
local XNEG = 1
local ZNEG = 2
local XPOS = 3

local _th = 0
local _tx = 0
local _ty = 0
local _tz = 0
local _callback = nil
local _sel = 0
local FALL_TIME = 0.1
local SUCK_TIME = 0.1
local _minLevel = 10
local ATTACK_TIME = 0.5

function cb()
	if _callback ~= nil then
		_callback(_th,_tx,_ty,_tz)
	end
end

-- Location Functions --

function setLoc(h,x,y,z)
	_th = h
	_tx = x
	_ty = y
	_tz = z
	cb()
end

function getHeading()
	return _th
end

function getLoc()
	return _th,_tx,_ty,_tz
end

function getLocUp()
	return _tx,_ty+1,_tz
end

function getLocDn()
	return _tx,_ty-1,_tz
end

function getLocFd()
	if _th == ZPOS then
		return _tx, _ty, _tz + 1
	elseif _th == ZNEG then
		return _tx, _ty, _tz - 1
	elseif _th == XPOS then
		return _tx + 1, _ty, _tz
	elseif _th == XNEG then
		return _tx - 1, _ty, _tz
	end
end

function getLocBk()
	if _th == ZPOS then
		return _tx, _ty, _tz - 1
	elseif _th == ZNEG then
		return _tx, _ty, _tz + 1
	elseif _th == XPOS then
		return _tx - 1, _ty, _tz
	elseif _th == XNEG then
		return _tx + 1, _ty, _tz
	end
end

function getLocRt()
	local h = (_th + 1) % 4

	if h == ZPOS then
		return _tx, _ty, _tz + 1
	elseif h == ZNEG then
		return _tx, _ty, _tz - 1
	elseif h == XPOS then
		return _tx + 1, _ty, _tz
	elseif h == XNEG then
		return _tx - 1, _ty, _tz
	end
end

function getLocLt()
	local h = ((_th - 1) + 4) % 4

	if h == ZPOS then
		return _tx, _ty, _tz + 1
	elseif h == ZNEG then
		return _tx, _ty, _tz - 1
	elseif h == XPOS then
		return _tx + 1, _ty, _tz
	elseif h == XNEG then
		return _tx - 1, _ty, _tz
	end
end

-- utilities --
function getItemCount(i)
	return turtle.getItemCount(i)
end

function select(i)
	if i == nil then
		return
	end

	if i ~= _sel then
		turtle.select(i)
		_sel = i
	end
end

function _compare(fn, i)
	-- save current selection
	local s = _sel

	-- change if set
	if i ~= nil then
		select(i)
	end

	-- do check
	local flag = fn()

	-- set selection back
	if s ~= _sel and s ~= 0 then
		select(s)
	end

	-- return result
	return flag
end

function compare(i)
	return _compare(turtle.compare, i)
end

function compareUp(i)
	return _compare(turtle.compareUp, i)
end

function compareDown(i)
	return _compare(turtle.compareDown, i)
end

function compareDn(i)
	return _compare(turtle.compareDown, i)
end

function detect()
	return turtle.detect()
end

function detectUp()
	return turtle.detectUp()
end

function detectDown()
	return turtle.detectDown()
end

function detectDn()
	return turtle.detectDown()
end

function _place(fn, i)
	local s = _sel
	if i ~= nil then
		select(i)
	end

	local flag = fn()

	select(s)

	return flag
end

function place(i)
	return _place(turtle.place, i)
end

function placeUp(i)
	return _place(turtle.placeUp, i)
end

function placeDown(i)
	return _place(turtle.placeDown, i)
end

function attack()
	return turtle.attack()
end

function attackUp()
	return turtle.attackUp()
end

function attackDown()
	return turtle.attackDown()
end

function _drop(fn, i)
	if i == nil then
		return fn()
	else
		return fn(i)
	end
end

function drop(i)
	return _drop(turtle.drop, i)
end

function dropUp(i)
	return _drop(turtle.dropUp, i)
end

function dropDown(i)
	return _drop(turtle.dropDown, i)
end

function dropDn(i)
	return dropDown(i)
end

-- basic movement functions --
function setMinFuelLevel(level)
	_minLevel = level
end

function fuel(force)
	if force == nil then
		force = false
	end

	if turtle.getFuelLevel() <= 10 or force then
		select(1)
		while turtle.getItemCount(1) > 1 and turtle.getFuelLevel() < _minLevel do
			turtle.refuel(1)
		end
	end
end

function up(count)
	if count == nil then
		count = 1
	end

	for i=1, count do
		fuel()
		local flag = turtle.up()

		if flag then _ty = _ty + 1 end
		cb()

		if not flag then
			return false
		end
	end

	return true
end

function forward(count)
	if count == nil then
		count = 1
	end

	for i=1,count do
		fuel()
		local flag = turtle.forward()

		if flag then
			if _th == ZPOS then
				_tz = _tz + 1
			elseif _th == ZNEG then
				_tz = _tz - 1
			elseif _th == XPOS then
				_tx = _tx + 1
			elseif _th == XNEG then
				_tx = _tx - 1
			end
		end
		cb()

		if not flag then
			return false
		end
	end
	return true
end

function back(count)
	if count == nil then
		count = 1
	end

	for i=1,count do
		fuel()

		local flag = turtle.back()

		if flag then
			if _th == ZPOS then
				_tz = _tz - 1
			elseif _th == ZNEG then
				_tz = _tz + 1
			elseif _th == XPOS then
				_tx = _tx - 1
			elseif _th == XNEG then
				_tx = _tx + 1
			end
		end
		cb()

		if not flag then
			return false
		end
	end
	return true
end

function down(count)
	if count == nil then
		count = 1
	end

	for i=1,count do
		fuel()
		local flag = turtle.down()

		if flag then
			_ty = _ty - 1
		end
		cb()

		if not flag then
			return false
		end
	end
	return true
end

function turnRight(count)
	if count == nil then
		count = 1
	end

	for i=1,count do
		turtle.turnRight()
		_th = (_th + 1) % 4
		cb()
	end
end

function turnLeft(count)
	if count == nil then
		count = 1
	end

	for i=1,count do
		turtle.turnLeft()
		_th = ((_th - 1) + 4) % 4
		cb()
	end
end

function turnHeading(t)
	if t == _th then
		return
	end

	if _th - t == 1 or (t == 3 and _th == 0) then
		while _th ~= t do
			lt()
		end
	else
		while _th ~= t do
			rt()
		end
	end
end

function setHeading(t)
	return turnHeading(t)
end


-- movement shortcuts --
function rt(count)
	return turnRight(count)
end

function lt(count)
	return turnLeft(count)
end

function dn(count)
	return down(count)
end

function fd(count)
	return forward(count)
end

function bk(count)
	return back(count)
end

-- dig wrappers --
function dig()
	return turtle.dig()
end

function digUp()
	return turtle.digUp()
end

function digDown()
	return turtle.digDown()
end

-- dig chests --
function _digChest(fnSuck, fnDig)
	while fnSuck() do
		os.sleep(SUCK_TIME)
	end

	return fnDig()
end

function digChest()
	_digChest(turtle.suck, dig)
end


function digChestDown()
	_digChest(turtle.suckDown, digDown)
end

function digChestUp()
	_digChest(turtle.suckUp, digUp)
end

-- dig gravel/sand
function _digAll(fnDetect, fnDig)
	while fnDetect() do
		if not fnDig() then
			return false
		end
		os.sleep(FALL_TIME)
	end
	return true
end

function digAllUp()
	_digAll(detectUp, digUp)
end

function digAll()
	_digAll(detect, dig)
end


function isInventoryFull()
	for i=1,16 do
		if turtle.getItemCount(i) == 0 then
			return false
		end
	end

	return true
end

function countInventory(s,f)
	if s == nil then
		s = 1
	end
	if f == nil then
		f = 16
	end

	local count = 0

	for i=s,f do
		count = count + turtle.getItemCount(i)
	end

	return count
end

function compactInventory(s,f)
	if s == nil then
		s = 1
	end
	if f == nil then
		f = 16
	end

	local sel = _sel

	-- try to compact contents
	for i=s,15 do
		for j=f,i+1,-1 do
			if turtle.getItemCount(j) > 0 then
				select(j)
				turtle.transferTo(i)
			end
		end
	end

	select(sel)
end


-- advanced movement -- 

-- move/attack commands --
function _mvAttack(mvfn, dfn, atckfn)
	while not mvfn() and not dfn() do
		atckfn()
		os.sleep(ATTACK_TIME)
	end
end

function upAttack()
	_mvAttack(up, detectUp, turtle.attackUp)
end

function downAttack()
	_mvAttack(down, detectDown, turtle.attackDown)
end

function forwardAttack()
	_mvAttack(forward, detect, turtle.attack)
end

function dnAttack()
	_mvAttack(down, detectDown, turtle.attackDown)
end

function fdAttack()
	_mvAttack(forward, detect, turtle.attack)
end

-- move, dig/attack --
function _mvDigAttack(fnMv, fnDetect, fnDig, fnAttack, count)
	if count == nil then
		count = 1
	end
	for i=1,count do
		while not fnMv() do
			-- if block, then dig
			if fnDetect() then
				fnDig()
				os.sleep(FALL_TIME)
			else
				-- this is a mob, attack until nothing to attack
				while fnAttack() do 
					os.sleep(ATTACK_TIME)
				end
			end
		end
	end

	return true;
end

function upDigAttack(count)
	_mvDigAttack(up, detectUp, turtle.digUp, turtle.attackUp,count)
end

function forwardDigAttack(count)
	_mvDigAttack(forward, detect, turtle.dig, turtle.attack,count)
end

function downDigAttack(count)
	_mvDigAttack(down, detectDown, digDown, turtle.attackDown,count)
end

function fdDigAttack(count)
	_mvDigAttack(forward, detect, turtle.dig, turtle.attack,count)
end

function dnDigAttack(count)
	_mvDigAttack(down, detectDown, digDown, turtle.attackDown,count)
end

-- move/dig --
function _mvDig(fnDetect, fnDig, fnMove)
	while fnDetect() do
		fnDig()
		os.sleep(FALL_TIME)
	end

	return fnMove()
end

function forwardDig()
	_mvDig(detect, dig, forward)
end

function upDig()
	_mvDig(detectUp, digUp, up)
end

function downDig()
	_mvDig(detectDown, digDown, down)
end


--replaces the item in the world with the item in slot i
function _replace(fnCompare, fnDetect, fnDig, fnPlace, i)
	select(i)
	if not fnCompare() or not fnDetect() then
		fnDig()
		fnPlace()
	end
end

function replace(i)
	_replace(compare, detect, digAll, turtle.place, i)
end	
	
function replaceUp(i)
	_replace(compareUp, detectUp, digAllUp, turtle.placeUp, i)
end	
	
function replaceDown(i)
	_replace(compareDown, detectDown, digDown, turtle.placeDown, i)
end	



-- coordinate based movement --

function moveToX(x)
	if _tx > x then
		turnHeading(XNEG)
	elseif _tx < x then
		turnHeading(XPOS)
	end

	while _tx ~= x do
		forwardDigAttack()
	end
end

function moveToZ(z)
	if _tz > z then
		turnHeading(ZNEG)
	elseif _tz < z then
		turnHeading(ZPOS)
	end

	while _tz ~= z do
		forwardDigAttack()
	end
end

function moveToY(y)
	while y > _ty do
		upDigAttack()
	end

	while y < _ty do
		downDigAttack()
	end
end


function goto(x,y,z)
	if _ty < y then
		moveToY(y)
	end

	if math.abs(_tx - x) < math.abs(_tz - z) then
		moveToX(x)
		moveToZ(z)
	else
		moveToZ(z)
		moveToX(x)
	end

	if _ty > y then
		moveToY(y)
	end
end

